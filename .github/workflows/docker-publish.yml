name: Docker

on:
  push:
    # Publish `master` as Docker `testing-alpine` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: zerojudge

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file docker/tomcat-9-jdk8-debian-slim/Dockerfile
            docker build . --file docker/alpine/Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    #needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `testing-alpine` tag convention
          [ "$VERSION" == "master" ] && VERSION=testing
          
          export VERSION=$VERSION
          
          #docker build . --file docker/tomcat-9-jdk8-debian-slim/Dockerfile --tag $IMAGE_NAME:$VERSION
          #docker build . --file docker/alpine/Dockerfile --tag $IMAGE_NAME:$VERSION-alpine

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          #docker tag $IMAGE_NAME:$VERSION $IMAGE_ID:$VERSION
          #docker tag $IMAGE_NAME:$VERSION-alpine $IMAGE_ID:$VERSION-alpine
          #docker push $IMAGE_ID:$VERSION
          #docker push $IMAGE_ID:$VERSION-alpine
          
      - name: Log into Docker Hub
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.DH_PAT }}" | docker login -u ${{ github.actor }} --password-stdin

      - name: Push image to Docker Hub
        run: |
          IMAGE_ID=docker.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          #docker tag $IMAGE_NAME:$VERSION $IMAGE_ID:$VERSION
          #docker tag $IMAGE_NAME:$VERSION-alpine $IMAGE_ID:$VERSION-alpine
          #docker push $IMAGE_ID:$VERSION
          #docker push $IMAGE_ID:$VERSION-alpine
